//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System.Linq;
using Rock.Data;
using Rock.Web.Cache;

namespace Rock.ViewModel
{
    /// <summary>
    /// AttributeViewModel
    /// </summary>
    /// <seealso cref="Rock.ViewModel.IViewModel" />
    public partial class AttributeViewModel
    {
        /// <summary>
        /// Gets or sets the category names.
        /// </summary>
        /// <value>
        /// The category names.
        /// </value>
        public string[] CategoryNames { get; set; }

        /// <summary>
        /// Sets the properties from entity.
        /// </summary>
        /// <param name="entity">The entity, cache item, or some object.</param>
        /// <param name="loadAttributes">if set to <c>true</c> [load attributes].</param>
        public override void SetPropertiesFrom( object entity, bool loadAttributes = true )
        {
            if ( entity == null )
            {
                return;
            }

            base.SetPropertiesFrom( entity, loadAttributes );

            if ( entity is IEntity entityWithId )
            {
                var attribute = AttributeCache.Get( entityWithId.Id );

                if ( attribute != null )
                {
                    CategoryNames = attribute.Categories.Select( c => c.Name ).ToArray();
                }
            }
        }
    }
}
